#!/usr/bin/env bash
# Do - The Simplest Build Tool on Earth.
# Documentation and examples see https://github.com/8gears/do
#
SCRIPTNAME=`basename "$0"`
BASEDIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/..
cd ${BASEDIR}

build() {
    # Build for prod

    [ -f .env ] || cp env.example .env

    [ -d dist ] || { bun run build; exit 0; }
    [ -d node_modules ] || { bun run build; exit 0; }

    # Get the latest timestamps (in seconds since epoch) for each directory tree
    dist_t=$(find "dist" -type d -exec stat -c '%Y' {} + | sort -nr | head -n 1)
    [ -z "$dist_t" ] && { bun run build; exit 0; }

    # Cheapest find first
    cur_dir_t=$(find . -maxdepth 1 -type f -exec stat -c '%Y' {} + | sort -nr | head -n 1)
    [ "$cur_dir_t" -gt "$dist_t" ] && { echo "some config file is older than src, so rebuilding"; bun run build; exit 0; }

    src_t=$(find "src" -type f -exec stat -c '%Y' {} + | sort -nr | head -n 1)
    [ "$src_t" -gt "$dist_t" ] && { echo "dist is older than src, so rebuilding"; bun run build; exit 0; }

    # Most expensive find last
    node_modules_t=$(find "node_modules" -type d -exec stat -c '%Y' {} + | sort -nr | head -n 1)
    [ -z "$node_modules_t" ] && { bun run build; exit 0; }
    [ "$node_modules_t" -gt "$dist_t" ] && { echo "dist is older than node_modules, so rebuilding"; bun run build; exit 0; }

    # else:
    echo "dist is newer than src, skipping rebuild"

}

generate-types() {
    if [ ! -z "$NEEMS_CORE_DIR" ]; then
        local target_dir="$NEEMS_CORE_DIR"
    elif [ -d ../core/neems-core ]; then
        local target_dir="../core/neems-core"
    elif [ -d ../neems-core/neems-core ]; then
        local target_dir="../neems-core/neems-core"
    fi
    pushd "$target_dir" > /dev/null
    cargo test generate_typescript_types
    popd > /dev/null
}

serve() {
    watch
}

test() {
    # Make sure we've done `bun run dev`
    [ -z "$NEEMS_REACT_PORT" ] && export NEEMS_REACT_PORT=5173
    timeout 1 bash -c ">/dev/tcp/localhost/${NEEMS_REACT_PORT}" || { echo "Error: localhost:${NEEMS_REACT_PORT} is not accepting connections" >&2; exit 1; }
    echo Test server is listening at localhost:${NEEMS_REACT_PORT}

    cd test

    # Check if Chrome is available for Puppeteer
    if ! npx puppeteer browsers installed chrome &>/dev/null; then
        echo "Chrome not found for Puppeteer. Installing Chrome..."
        npx puppeteer browsers install chrome
        if [ $? -ne 0 ]; then
            echo "Failed to install Chrome. Please run 'npx puppeteer browsers install chrome' manually."
            exit 1
        fi
        echo "Chrome installation completed."
    fi

    npx jest --color --config=jest/tests/jest.config.js "$@" 2>&1 | tee >(ansi2txt | wl-copy) 
}

watch() {
    [ -f .env ] || cp env.example .env
    bun run dev
}

"$@" # <- execute the task
[ "$#" -gt 0 ] || printf "Usage:\n\t./${SCRIPTNAME} %s\n" "($(compgen -A function | grep '^[^_]' | paste -sd '|' -))"
