#!/usr/bin/env bash
# Do - The Simplest Build Tool on Earth.
# Documentation and examples see https://github.com/8gears/do
#
SCRIPTNAME=`basename "$0"`
BASEDIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/..
cd ${BASEDIR}

build() {
    npm run build
}

serve() {
    npm run dev
}

test-local() {
    cd docker/test

    npx jest --color --config=tests/jest.config.js "$@"
}

test() {

    # Copy the static files to the docker/test directory, but only if
    # NEEMS_STATIC starts with http:// or https://.  If NEEMS_STATIC
    # is a url, we're hitting an endpoint, not pulling from a local
    # directory.

    # Pull in variables from docker/test/.env
    export $(envsubst < docker/test/.env | grep -v '^#' | xargs)

    # Validate NEEMS_STATIC is set and not empty
    if [[ -z "${NEEMS_STATIC_URL}" ]]; then
        # Copy the static files to the docker/test directory
	echo "Copying files from dist to the nginx test dir"
	mkdir -p docker/test/nginx/dist
        rsync -r --delete dist/ docker/test/nginx/dist/
    else
	echo "Using server for neems static fies. NEEMS_STATIC URL: ${NEEMS_STATIC}"
	mkdir -p docker/test/nginx/dist
	rm -rf docker/test/nginx/dist/*
    fi

    cd docker/test
    mkdir -p nginx/logs
    rm -f nginx/logs/*
    chmod a+rwx nginx/logs

    export TEST_PARAMETERS="$@"

    docker build --quiet -t test-react-deps -f Dockerfile.deps . && \
    docker build --quiet --no-cache -t test-react -f Dockerfile.test-corpus . && \
    pushd nginx > /dev/null && \
    docker build --quiet --no-cache -t test-nginx -f Dockerfile.nginx . && \
    popd > /dev/null && \
    docker-compose up --abort-on-container-exit
    docker-compose down
}

push() {
    echo "Pushing dist directory to newtown.energy..."
    rsync -r dist/ root@newtown.energy:/opt/neems/react
}

watch() {
    # This doesn't run a server.  It just builds the project and
    # watches for changes.  Use a backend server like `dosh serve` to
    # serve the files.
    npm run build
    echo "Watching index.html and src/ for changes..."
    inotify-hookable -w src -w index.html -c "echo 'Changes detected, rebuilding...' && ./bin/dosh build"
}

"$@" # <- execute the task
[ "$#" -gt 0 ] || printf "Usage:\n\t./${SCRIPTNAME} %s\n" "($(compgen -A function | grep '^[^_]' | paste -sd '|' -))"
